#if 0
/* DO NOT EDIT THIS FILE - it is machine generated */
#include <android/log.h>
#include <stdio.h>
#include <stdlib.h>
#include <JNIHelp.h>
#include "android_runtime/Log.h"
#include <assert.h>
#include <limits.h>
#include <unistd.h>
#include <fcntl.h>
#include "jni.h"
//#include "com_CTC_ChinaNet_android_tm_Native.h"
#include "Secure.h"


#define LOG_TAG "JNI_LOG"
 
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)


namespace android {

 JNIEXPORT jstring JNICALL Java_com_CTC_1ChinaNet_android_tm_Native_getSN
 (JNIEnv *env, jclass jclss){
 	//XXX TestData:jni-getSN
 //	unsigned char* sn="testSn";
 //	int ret = 0;
 
 	unsigned char sn[25];
 	memset(sn,  0,  25);
 	int sn_len=0;
 
 	int ret = TA_GetSN(sn, &sn_len);
 	
 	LOGI("sn--> %s; ret = %d \n", sn, ret);
	// return  env->NewStringUTF(env, sn);
	return  env->NewStringUTF((char*)sn);
  }
 
 JNIEXPORT jstring JNICALL Java_com_CTC_1ChinaNet_android_tm_Native_getRandom
 (JNIEnv *env, jclass jclss){
 	char random[17];
 	memset(random,  0,  17);
 	MSTAR_readRandom(random);
 	LOGI("random--> %s \n", random);
 	return  (*env)->NewStringUTF(env, random);
 }
 
 JNIEXPORT jbyteArray JNICALL Java_com_CTC_1ChinaNet_android_tm_Native_getAuthenticator
   (JNIEnv *env, jclass jclss, jbyteArray jbarray, jstring jrandom, jstring jtime) {
 	jbyte *buf = (jbyte *) (*env)->GetByteArrayElements(env, jbarray, NULL);
 	char* input = (char*) buf;
 
 	char pt[65];
 	memset(pt,  0,  65);
 	MSTAR_Hex_RSA_Decrypt(input, 64, pt);
 	LOGI("\ngetAuthenticator pt--> %s\n", pt); 
 
 	//-----------------------------------------------------------------------------------------
 	//   oid(4) + client time(14) + client random(16) + server time(14) + server random(16)   *
 	//-----------------------------------------------------------------------------------------
 	char oid[5];
 	memset(oid,  0,  5);
 	memcpy(oid, pt , 4);
 	LOGI("\ngetAuthenticator oid--> %s\n", oid);
 	char ctime[15];
 	memset(ctime,  0,  15);
 	memcpy(ctime, pt + 4, 14);
 	LOGI("\ngetAuthenticator ctime--> %s\n", ctime);
 
 	char crandom[17];
 	memset(crandom,  0,  17);
 	memcpy(crandom, pt + 18, 16);
 	LOGI("\ngetAuthenticator crandom--> %s\n", crandom);
 
 	char stime[15];
 	memset(stime,  0,  15);
 	memcpy(stime, pt + 34, 14);
 	LOGI("\ngetAuthenticator stime--> %s\n", stime);
 	char srandom[17];
 	memset(srandom,  0,  17);
 	memcpy(srandom, pt + 48, 16);
 	LOGI("\ngetAuthenticator srandom--> %s\n", srandom);
 	char *random = (*env)->GetStringUTFChars(env, jrandom, 0);
 	char *time = (*env)->GetStringUTFChars(env, jtime, 0);
 
 	if (strcmp(random, crandom) != 0)
 		return NULL;
 	
 	if (strcmp(time, ctime) != 0)
 		return NULL;
 
 	char authinput[35];
 	char algorithm[33];
 	memset(algorithm,  0,  33);
 	memset(authinput,  0,  35);
 	sprintf(authinput, "%s%s%s",oid, stime, srandom);
 	LOGI("\ngetAuthenticator input --> %s\n", authinput);
 	int  ret = MSTAR_Hex_SHA256_Decrypt(authinput, 34, algorithm);
 	LOGI("\ngetAuthenticator algorithm --> %s\n", algorithm);
 
 	if (ret != 0)
 		return NULL;
 	
 	LOGI("\ngetAuthenticator input --> %s\n", input); 
 	LOGI("\ngetAuthenticator algorithm --> %s\n", algorithm); 
 
 	jbyteArray jbarrayout = (*env)->NewByteArray(env, 32);
 	(*env)->SetByteArrayRegion(env, jbarrayout, 0, 32, algorithm);
 	
 	(*env)->ReleaseStringUTFChars(env, jrandom, random);
 	(*env)->ReleaseStringUTFChars(env, jtime, time);
 	return jbarrayout;
 }
 
 JNIEXPORT jint JNICALL Java_com_CTC_1ChinaNet_android_tm_Native_getAuthenticatorID
   (JNIEnv *env, jclass jclss) {
 	return 1;
 }
 
 JNIEXPORT jstring JNICALL Java_com_CTC_1ChinaNet_android_tm_Native_getR2
   (JNIEnv *env, jclass jclss, jbyteArray jbarray, jstring jrandom, jstring jtime) {
   	jbyte *buf = (jbyte *) (*env)->GetByteArrayElements(env, jbarray, NULL);
 	char* input = (char*) buf;
 
 	char pt[65];
 	memset(pt,  0,  65);
 	int len=0;
 	LOGI("input--> %s\n", input);
 	MSTAR_Hex_RSA_Decrypt(input, 64, pt);
 	LOGI("pt--> %s\n", pt);
 	
 	//---------------------------------------------------------------------------------------------
 	//   oid(4) + client time(14) + client random(16) + server time(14) + server random(16)   *
 	//---------------------------------------------------------------------------------------------
 	char oid[5];
 	memset(oid,  0,  5);
 	memcpy(oid, pt , 4);
 
 	char ctime[15];
 	memset(ctime,  0,  15);
 	memcpy(ctime, pt + 4, 14);
 	LOGI("ctime--> %s\n", ctime);
 
 	char crandom[17];
 	memset(crandom,  0,  17);
 	memcpy(crandom, pt + 18, 16);
 	LOGI("crandom--> %s\n", crandom);
 
 	char stime[15];
 	memset(stime,  0,  15);
 	memcpy(stime, pt + 34, 14);
 	
 	char srandom[17];
 	memset(srandom,  0,  17);
 	memcpy(srandom, pt + 48, 16);
 
 	char *random = (*env)->GetStringUTFChars(env, jrandom, 0);
 	char *time = (*env)->GetStringUTFChars(env, jtime, 0);
 
 	if (strcmp(random, crandom) != 0)
 		return NULL;
 
 	if (strcmp(time, ctime) != 0) 
 		return NULL;
 
 	LOGI("srandom--> %s \n", srandom);
 	(*env)->ReleaseStringUTFChars(env, jrandom, random);
 	(*env)->ReleaseStringUTFChars(env, jtime, time);
 	return  (*env)->NewStringUTF(env, srandom);
 }
 
 JNIEXPORT jstring JNICALL Java_com_CTC_1ChinaNet_android_tm_Native_sPubKeyCertify
   (JNIEnv *env, jclass jclss, jstring jpKeyPackage, jstring jR2, jstring jT2){
 	unsigned char *pKeyPackage = (*env)->GetStringUTFChars(env, jpKeyPackage, 0);
 	unsigned char *r2 = (*env)->GetStringUTFChars(env, jR2, 0);
 	unsigned char *t2 = (*env)->GetStringUTFChars(env, jT2, 0);
 	int pKeyPackagelen=strlen(pKeyPackage);
 	int r2len=strlen(r2);
 	int t2len=strlen(t2);
 	int pAuthenticatorLen=0;
 
 	LOGI("pKeyPackage--> %s; R2 = %s ;T2=%s \n", pKeyPackage, r2,t2);
 	unsigned char pAuthenticator[257];
 	memset(pAuthenticator,  0,  257);
 	int pAlgorithmID_H=-1;
 	int pAlgorithmID_AUTH=-1;
 	unsigned char splite[2]={','};
 
 	//XXX TestData:jni-sPubKeyCertify
 //	pAuthenticator="test";
 //	pAlgorithmID_H=1;
 //	pAlgorithmID_AUTH=1;
 
 	TA_SPubKeyCertify(pKeyPackage,&pKeyPackagelen
 						,r2,&r2len
 						,t2,&t2len
 						,pAuthenticator,&pAuthenticatorLen
 						,&pAlgorithmID_H,&pAlgorithmID_AUTH);
 
 	LOGI("pAuthenticator--> %s; pAlgorithmID_H = %d ;pAlgorithmID_AUTH=%d \n", pAuthenticator, pAlgorithmID_H,pAlgorithmID_AUTH);
 
 	char pAlgorithmID_H_char[2];
 	sprintf(pAlgorithmID_H_char, "%d", pAlgorithmID_H);
 	char pAlgorithmID_AUTH_char[2];
 	sprintf(pAlgorithmID_AUTH_char, "%d", pAlgorithmID_AUTH);
 
 	int len=0;
 	LOGI("\nlen[1]---------> %d\n",len);	
 	len=strlen((const char *)pAuthenticator);
 	LOGI("\nlen[2]---------> %d\n",len);
 	len+=strlen((const char *)pAlgorithmID_H_char);
 	LOGI("\nlen[3]---------> %d\n",len);
 	len+=strlen((const char *)pAlgorithmID_AUTH_char);
 	LOGI("\nlen[4]---------> %d\n",len);
 	len+=2*strlen((const char *)splite);
 	LOGI("\nlen[5]---------> %d\n",len);
 
 	LOGI("returnStrArr--> %d",len);
 
 	char pstr[len+1];
 	memset(pstr,  0,  len);
 
 	strcpy(pstr,pAuthenticator);
 	strcat(pstr,splite);
 	strcat(pstr,pAlgorithmID_H_char);
 	strcat(pstr,splite);
 	strcat(pstr,pAlgorithmID_AUTH_char);
 
 	LOGI("returnStrArr--> %s",pstr);
 
 	(*env)->ReleaseStringUTFChars(env, jpKeyPackage, pKeyPackage);
 	(*env)->ReleaseStringUTFChars(env, jR2, r2);
 	(*env)->ReleaseStringUTFChars(env, jT2, t2);
 
 	return  (*env)->NewStringUTF(env, pstr);
 }
 
 JNIEXPORT jboolean JNICALL Java_com_CTC_1ChinaNet_android_tm_Native_setTMtoken
 (JNIEnv *env, jclass jclss, jstring jtmtoken){
 	unsigned char *tmtoken = (*env)->GetStringUTFChars(env, jtmtoken, 0);
 	int tmTokenlen=strlen(tmtoken);
 	int ret =1;//0:success,other:failed
 
 	ret = TA_TMtokenSyn(tmtoken,&tmTokenlen);
 
 	jboolean r=0;//o:false,1:true
 	if(ret==0){//success
 		r=1;
 	}
 
 	LOGI("setTMRslt--> %d",r);
 	(*env)->ReleaseStringUTFChars(env, jtmtoken, tmtoken);
 	return r;
 }
 
 
 JNIEXPORT jint JNICALL Java_com_CTC_1ChinaNet_android_tm_Native_tm_Recovery_Update
   (JNIEnv *env, jclass jclss) {
         int ret =1;//0:success,other:failed
         ret = Reboot_Recovery_Update();
         return ret;
 }
 
 JNIEXPORT jint JNICALL Java_com_CTC_1ChinaNet_android_tm_Native_tm_Recovery__Restore_factory
   (JNIEnv *env, jclass jclss) {
         int ret =1;//0:success,other:failed
         ret = Reboot_Recovery_Restore_factory();
         return ret;
 }


}
#else
#include <stdio.h>
#include <assert.h>
#include <limits.h>
#include <unistd.h>
#include <fcntl.h>
#include "jni.h"
#include "JNIHelp.h"
#include "android_runtime/AndroidRuntime.h"
#include "android_runtime/android_view_Surface.h"
#include "android_runtime/Log.h"
#include "utils/Errors.h"  // for status_t
#include "utils/KeyedVector.h"
#include "utils/String8.h"
#include "Secure.h"

#define LOG_TAG "JNI_LOG"
 
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO,LOG_TAG,__VA_ARGS__)
#define LOGE(...) __android_log_print(ANDROID_LOG_ERROR,LOG_TAG,__VA_ARGS__)


//#include "cyber_av.h"

using namespace android;

static jstring
com_exampl_Mdtvdemo_Native_getSN(JNIEnv *env, jobject thiz)
{
 	unsigned char sn[25];
 	memset(sn,  0,  25);
 	int sn_len=0;

    LOGI("[tony.chen] com_exampl_Mdtvdemo_Native_getSN");
	
 	int ret = TA_GetSN(sn, &sn_len);
 	LOGI("sn--> %s; ret = %d \n", sn, ret);
	return  env->NewStringUTF((char*)sn);
}

static jstring
com_exampl_Mdtvdemo_Native_TimeStamp(JNIEnv *env, jobject thiz)
{
 	unsigned char TimeStamp[25];
 	memset(TimeStamp,  0,  25);
 	int TimeStamp_len=0;
 	int ret = TA_Factory_Certify_TimeStamp(TimeStamp, &TimeStamp_len);
 	LOGI("TimeStamp--> %s; TimeStamp_len = %d \n", TimeStamp, TimeStamp_len);
	return  env->NewStringUTF((char*)TimeStamp);
}

static jstring
com_exampl_Mdtvdemo_Native_Random(JNIEnv *env, jobject thiz)
{
 	unsigned char Random[33];
 	memset(Random,  0,  33);
 	int Random_len=0;

 	int ret = TA_Factory_Certify_Random(Random, &Random_len);
 	LOGI("Random--> %s; Random_len = %d \n", Random, Random_len);
	return  env->NewStringUTF((char*)Random);
}

static jint
com_exampl_Mdtvdemo_Native_OTP_SetChipID(JNIEnv *env, jobject thiz,jstring jpChipID)
{
      const char *pChipID = env->GetStringUTFChars(jpChipID, 0);
      int pChipIDlen=strlen(pChipID);
      LOGI("pChipID--> %s \n", pChipID);
      TA_OTP_SetChipID((unsigned char*)pChipID);
      return 0;
}

static jstring
com_exampl_Mdtvdemo_Native_OTP_GetChipID(JNIEnv *env, jobject thiz)
{
    unsigned char ChipID[9];
    memset(ChipID,  0,  9);
    int ChipID_len=0;

    TA_OTP_GetChipID(ChipID);
    LOGI("ChipID--> %s\n", ChipID);
    return  env->NewStringUTF((char*)ChipID);
}

static jint
com_exampl_Mdtvdemo_Native_OTP_Write_SN_Data(JNIEnv *env, jobject thiz,jstring jpSN)
{
      const char *pSN = env->GetStringUTFChars(jpSN, 0);
      int pSNlen=strlen(pSN);
      LOGI("pSN--> %s ,pSNlen = %d\n", pSN,pSNlen);
      if(pSNlen == 24)
          TA_OTP_Write_SN_Data((unsigned char*)pSN);
	else
	   return -1;
      return 0;
}

static jint
com_exampl_Mdtvdemo_Native_OTP_Write_IN_Data(JNIEnv *env, jobject thiz,jstring jpIN)
{
      const char *pIN = env->GetStringUTFChars(jpIN, 0);
      int pINlen=strlen(pIN);
      LOGI("pIN--> %s  pINlen=%d\n", pIN,pINlen);
      if(pINlen == 24)
          TA_OTP_Write_IN_Data((unsigned char*)pIN);
      else
	  return -1;
      return 0;
}

static jint
com_exampl_Mdtvdemo_Native_OTP_Write_RSA_N_Data(JNIEnv *env, jobject thiz)
{
      TA_OTP_Write_RSA_N_Data();
	  LOGI("com_exampl_Mdtvdemo_Native_OTP_Write_RSA_N_Data");
      return 0;
}

static jint
com_exampl_Mdtvdemo_Native_OTP_Write_RSA_E_Data(JNIEnv *env, jobject thiz)
{
      TA_OTP_Write_RSA_E_Data();
      LOGI("com_exampl_Mdtvdemo_Native_OTP_Write_RSA_D_Data");
      return 0;
}

static jstring
com_exampl_Mdtvdemo_Native_OTP_Read_RSA_N_Data(JNIEnv *env, jobject thiz)
{
    unsigned char RSA_N[129];
    memset(RSA_N,  0,  129);
    TA_OTP_Read_RSA_N_Data(RSA_N);
    return  env->NewStringUTF((char*)RSA_N);
}

static jstring
com_exampl_Mdtvdemo_Native_OTP_Read_RSA_E_Data(JNIEnv *env, jobject thiz)
{
    unsigned char RSA_E[5];
    memset(RSA_E,  0,  5);

    TA_OTP_Read_RSA_E_Data(RSA_E);
    LOGI("RSA_E--> %s\n", RSA_E);
    return  env->NewStringUTF((char*)RSA_E);
}

static jint
com_exampl_Mdtvdemo_Native_OTP_Write_M_Data(JNIEnv *env, jobject thiz)
{
      TA_OTP_Write_M_Data();
      LOGI("com_exampl_Mdtvdemo_Native_OTP_Write_M_Data");
      return 0;
}

static jint
com_exampl_Mdtvdemo_Native_OTP_Write_M_SN_IN_Data(JNIEnv *env, jobject thiz,jstring jpMSNIN)
{
      const char *pMSNIN = env->GetStringUTFChars(jpMSNIN, 0);
      int pMSNINlen=strlen(pMSNIN);
      LOGI("pMSNIN--> %s ,pSNlen = %d\n", pMSNIN,pMSNINlen);
      if(pMSNINlen == 60)
          TA_OTP_Write_M_SN_IN_Data((unsigned char*)pMSNIN);
	else
	   return -1;
      return 0;
}

static jstring
com_exampl_Mdtvdemo_Native_OTP_Read_Data(JNIEnv *env, jobject thiz)
{
    unsigned char ReadOtpData[61];
    memset(ReadOtpData,  0,  61);

    TA_OTP_Read_Data(ReadOtpData);
    LOGI("ReadOtpData--> %s\n", ReadOtpData);
    return  env->NewStringUTF((char*)ReadOtpData);
}


static jint
com_exampl_Mdtvdemo_Native_OTP_MaxReservedSize(JNIEnv *env, jobject thiz)
{
    int MaxReservedSize = 0;

    MaxReservedSize = TA_OTP_MaxReservedSize();
    LOGI("MaxReservedSize--> %d\n", MaxReservedSize);
    return  (jint)MaxReservedSize;
}

static jint
com_exampl_Mdtvdemo_Native_OTP_Lock(JNIEnv *env, jobject thiz)
{
    TA_OTP_Lock();
    LOGI("===================>com_exampl_Mdtvdemo_Native_OTP_Lock\n");
    return  0;
}

 static jstring
 com_exampl_Mdtvdemo_Native_Factory_IN_Certify(JNIEnv *env, jobject thiz, jstring jpSN, jstring jpMAC, jstring jpIN,jstring jpchipid,jstring jpMD5)
 {
 	const char *pSN = env->GetStringUTFChars(jpSN, 0);
 	const char *pMAC = env->GetStringUTFChars(jpMAC, 0);
 	const char *pIN = env->GetStringUTFChars(jpIN, 0);
	const char *pchipid = env->GetStringUTFChars(jpchipid, 0);
	const char *pMD5 = env->GetStringUTFChars(jpMD5, 0);
	
 	int pSNlen=strlen(pSN);
 	int pMAClen=strlen(pMAC);
 	int pINlen=strlen(pIN);
 	int pchipidlen=strlen(pchipid);
 	int pMD5len=strlen(pMD5);

 	LOGI("pSN--> %s; pMAC = %s ;pIN=%s ;pchipid = %s; pMD5 = %s\n", pSN, pMAC,pIN,pchipid,pMD5);
       int ret = -1;

 	unsigned char IN[25];
 	memset(IN,  0,  25);
	   
 	ret = Factory_IN_Certify((unsigned char*)pSN,(unsigned char*)pMAC,(unsigned char*)pIN,(unsigned char*)pchipid,(unsigned char*)pMD5,IN);

	LOGI("com_exampl_Mdtvdemo_Native_Factory_IN_Certify IN=%s\n",IN);

       if(ret == 0)
	    LOGI("Factory_IN_Certify SUC!!!!!!!\n");
	else
	    LOGI("Factory_IN_Certify FAIL!!!!!!!\n");

 	return  env->NewStringUTF((char*)IN);
 }



 static jstring
 com_exampl_Mdtvdemo_Native_TMtoken_Certify(JNIEnv *env, jobject thiz, jstring jpAuthenticator, jstring jpSN, jstring jpChipID,jstring jpIN)
 {
     	const char *pAuthenticator = env->GetStringUTFChars(jpAuthenticator, 0);
 	const char *pSN = env->GetStringUTFChars(jpSN, 0);
 	const char *pChipID = env->GetStringUTFChars(jpChipID, 0);
	const char *pIN = env->GetStringUTFChars(jpIN, 0);
	
 	int pAuthenticatorlen=strlen(pAuthenticator);
 	int pSNlen=strlen(pSN);
 	int pChipIDlen=strlen(pChipID);
 	int pINlen=strlen(pIN);

	LOGI("pAuthenticator--> %s; pSN = %s ;pChipID=%s ;pIN = %s\n", pAuthenticator, pSN,pChipID,pIN);

 	unsigned char SHA256_SN_CHIPID_IN_T2_R2_TEST[65];
 	memset(SHA256_SN_CHIPID_IN_T2_R2_TEST,  0,  65);

       int ret = -1;
 	ret = Factory_TMtoken_Certify((unsigned char*)pAuthenticator,(unsigned char*)pSN,(unsigned char*)pChipID,(unsigned char*)pIN,(unsigned char*)SHA256_SN_CHIPID_IN_T2_R2_TEST);

	return  env->NewStringUTF((char*)SHA256_SN_CHIPID_IN_T2_R2_TEST);
 
 }

static JNINativeMethod gMethods[] = {
    {"ChinaNet_android_tm_Native_getSN",                "()Ljava/lang/String;",             (void *)com_exampl_Mdtvdemo_Native_getSN},
    {"ChinaNet_android_tm_Native_Factory_IN_Certify",                "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",             (void *)com_exampl_Mdtvdemo_Native_Factory_IN_Certify},
    {"ChinaNet_android_tm_Native_TimeStamp",                "()Ljava/lang/String;",             (void *)com_exampl_Mdtvdemo_Native_TimeStamp},
    {"ChinaNet_android_tm_Native_Random",                "()Ljava/lang/String;",             (void *)com_exampl_Mdtvdemo_Native_Random},
    {"ChinaNet_android_tm_Native_TMtoken_Certify",                "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",             (void *)com_exampl_Mdtvdemo_Native_TMtoken_Certify},
    {"ChinaNet_android_tm_Native_OTP_SetChipID",                "(Ljava/lang/String;)I",             (void *)com_exampl_Mdtvdemo_Native_OTP_SetChipID},  
    {"ChinaNet_android_tm_Native_OTP_GetChipID",                "()Ljava/lang/String;",             (void *)com_exampl_Mdtvdemo_Native_OTP_GetChipID},
    {"ChinaNet_android_tm_Native_OTP_Write_SN_Data",                "(Ljava/lang/String;)I",             (void *)com_exampl_Mdtvdemo_Native_OTP_Write_SN_Data},  
    {"ChinaNet_android_tm_Native_OTP_Write_IN_Data",                "(Ljava/lang/String;)I",             (void *)com_exampl_Mdtvdemo_Native_OTP_Write_IN_Data},  
    {"ChinaNet_android_tm_Native_OTP_Write_RSA_N_Data",                "()I",             (void *)com_exampl_Mdtvdemo_Native_OTP_Write_RSA_N_Data},  
    {"ChinaNet_android_tm_Native_OTP_Write_RSA_E_Data",                "()I",             (void *)com_exampl_Mdtvdemo_Native_OTP_Write_RSA_E_Data},  
    {"ChinaNet_android_tm_Native_OTP_Write_M_Data",                "()I",             (void *)com_exampl_Mdtvdemo_Native_OTP_Write_M_Data}, 
    {"ChinaNet_android_tm_Native_OTP_Read_Data",                "()Ljava/lang/String;",             (void *)com_exampl_Mdtvdemo_Native_OTP_Read_Data},
    {"ChinaNet_android_tm_Native_OTP_MaxReservedSize",                "()I",             (void *)com_exampl_Mdtvdemo_Native_OTP_MaxReservedSize},  
    {"ChinaNet_android_tm_Native_OTP_Read_RSA_N_Data",                "()Ljava/lang/String;",             (void *)com_exampl_Mdtvdemo_Native_OTP_Read_RSA_N_Data},
    {"ChinaNet_android_tm_Native_OTP_Read_RSA_E_Data",                "()Ljava/lang/String;",             (void *)com_exampl_Mdtvdemo_Native_OTP_Read_RSA_E_Data},
    {"ChinaNet_android_tm_Native_OTP_Write_M_SN_IN_Data",                "(Ljava/lang/String;)I",             (void *)com_exampl_Mdtvdemo_Native_OTP_Write_M_SN_IN_Data},  
    {"ChinaNet_android_tm_Native_OTP_Lock",                "()I",             (void *)com_exampl_Mdtvdemo_Native_OTP_Lock},  	
};

static const char* const kClassPathName = "com/example/Mdtvdemo/MUtils";

static int register_com_exampl_Mdtvdemo(JNIEnv *env)
{
    return AndroidRuntime::registerNativeMethods(env, kClassPathName, gMethods, NELEM(gMethods));
}

jint JNI_OnLoad(JavaVM* vm, void* reserved)
{
    JNIEnv* env = NULL;
    jint result = -1;

    if (vm->GetEnv((void**) &env, JNI_VERSION_1_6) != JNI_OK) {
        ALOGE("ERROR: GetEnv failed\n");
        goto bail;
    }
    assert(env != NULL);

    if (register_com_exampl_Mdtvdemo(env) < 0) {
        ALOGE("ERROR: Cyber AV native registration failed");
        goto bail;
    }

    /* success -- return valid version number */
    result = JNI_VERSION_1_6;

bail:
    return result;
}

#endif
